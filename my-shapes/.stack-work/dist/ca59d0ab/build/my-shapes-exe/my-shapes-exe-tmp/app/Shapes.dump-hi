
==================== FINAL INTERFACE ====================
2017-10-31 11:16:47.4075651 UTC

interface main@main:Shapes 8002
  interface hash: d21c7f6becac4fb2205a1d9c93cb5b95
  ABI hash: 6518ff9e0f93d7422e9d476f8a62c4a2
  export-list hash: 86eff6cedd199d63d8d2bc7976a8b0bf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5d21ab77d928f42a81ac192da4031059
  sig of: Nothing
  used TH splices: False
  where
exports:
  Shapes.<+>
  Shapes.circle
  Shapes.empty
  Shapes.getX
  Shapes.getY
  Shapes.identity
  Shapes.inside
  Shapes.point
  Shapes.rotate
  Shapes.scale
  Shapes.square
  Shapes.translate
  Shapes.Drawing
  Shapes.Point
  Shapes.Shape
  Shapes.Transform
  Shapes.Vector
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Float b620368aab866c2bb9d3a0a459566b84
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
d772832f15664d4c641a75d43fce9112
  $fShowMatrix :: GHC.Show.Show Shapes.Matrix
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Matrix
                  Shapes.$fShowMatrix_$cshowsPrec
                  Shapes.$fShowMatrix_$cshow
                  Shapes.$fShowMatrix_$cshowList -}
d772832f15664d4c641a75d43fce9112
  $fShowMatrix1 :: Shapes.Matrix -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Shapes.Matrix) ->
                 case w of ww { Shapes.Matrix ww1 ww2 ->
                 Shapes.$w$cshowsPrec 0# ww1 ww2 }) -}
ca57c2f2985b2c4b63bfb2802f3b55b4
  $fShowMatrix2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Matrix "#) -}
d1e7780437e6e71d3789c0f7b04e145c
  $fShowMatrix3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Vector "#) -}
2f5186c1a63a356a82dab375e6539d2c
  $fShowMatrix4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
d772832f15664d4c641a75d43fce9112
  $fShowMatrix_$cshow :: Shapes.Matrix -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Matrix) ->
                 Shapes.$fShowMatrix_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d772832f15664d4c641a75d43fce9112
  $fShowMatrix_$cshowList :: [Shapes.Matrix] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Matrix
                   Shapes.$fShowMatrix1) -}
d772832f15664d4c641a75d43fce9112
  $fShowMatrix_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Matrix -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Shapes.Matrix) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Shapes.Matrix ww3 ww4 ->
                 Shapes.$w$cshowsPrec ww1 ww3 ww4 } }) -}
abd58a62a14eb9d62d876e708b16f31a
  $fShowShape :: GHC.Show.Show Shapes.Shape
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Shape
                  Shapes.$fShowShape_$cshowsPrec
                  Shapes.$fShowShape_$cshow
                  Shapes.$fShowShape_$cshowList -}
3bcbfa3e689adee2993951efce4bb9ba
  $fShowShape1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Square"#) -}
7baa32dbee5b598f0167e763c6a76973
  $fShowShape2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Circle"#) -}
b01f8280eacead7cf77958f56ef6eea8
  $fShowShape3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Empty"#) -}
abd58a62a14eb9d62d876e708b16f31a
  $fShowShape_$cshow :: Shapes.Shape -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Shape) ->
                 case x of wild {
                   Shapes.Empty -> Shapes.$fShowShape3
                   Shapes.Circle -> Shapes.$fShowShape2
                   Shapes.Square -> Shapes.$fShowShape1 }) -}
abd58a62a14eb9d62d876e708b16f31a
  $fShowShape_$cshowList :: [Shapes.Shape] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Shape
                   Shapes.$w$cshowsPrec2) -}
abd58a62a14eb9d62d876e708b16f31a
  $fShowShape_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Shape -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Shapes.Shape)
                   (w2 :: GHC.Base.String) ->
                 Shapes.$w$cshowsPrec2 w1 w2) -}
640b275df0c73fd7b3cd43c0b0de359b
  $fShowTransform :: GHC.Show.Show Shapes.Transform
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Transform
                  Shapes.$fShowTransform_$cshowsPrec
                  Shapes.$fShowTransform_$cshow
                  Shapes.$fShowTransform_$cshowList -}
640b275df0c73fd7b3cd43c0b0de359b
  $fShowTransform1 :: Shapes.Transform -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Shapes.$fShowTransform_$cshowsPrec
                   Shapes.$fShowTransform2) -}
cd9ba456394f91a903a05ab96de0498c
  $fShowTransform2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
640b275df0c73fd7b3cd43c0b0de359b
  $fShowTransform_$cshow :: Shapes.Transform -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Transform) ->
                 Shapes.$fShowTransform_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
640b275df0c73fd7b3cd43c0b0de359b
  $fShowTransform_$cshowList :: [Shapes.Transform] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Transform
                   Shapes.$fShowTransform1) -}
640b275df0c73fd7b3cd43c0b0de359b
  $fShowTransform_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Transform -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
bcdea6d54abefb730e65e12e3a8a5891
  $fShowVector :: GHC.Show.Show Shapes.Vector
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Vector
                  Shapes.$fShowVector_$cshowsPrec
                  Shapes.$fShowVector_$cshow
                  Shapes.$fShowVector_$cshowList -}
bcdea6d54abefb730e65e12e3a8a5891
  $fShowVector1 :: Shapes.Vector -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Shapes.Vector) ->
                 case w of ww { Shapes.Vector ww1 ww2 ->
                 Shapes.$w$cshowsPrec1 0# ww1 ww2 }) -}
bcdea6d54abefb730e65e12e3a8a5891
  $fShowVector_$cshow :: Shapes.Vector -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Vector) ->
                 Shapes.$fShowVector_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bcdea6d54abefb730e65e12e3a8a5891
  $fShowVector_$cshowList :: [Shapes.Vector] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Vector
                   Shapes.$fShowVector1) -}
bcdea6d54abefb730e65e12e3a8a5891
  $fShowVector_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Vector -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Shapes.Vector) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Shapes.Vector ww3 ww4 ->
                 Shapes.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
f7232fecaf5fe8821357cfd87192c87d
  $tc'Circle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4142175995223717761##
                   13283230786613771955##
                   Shapes.$trModule
                   Shapes.$tc'Circle1) -}
3f6e8f629afd164c132175aee6383d53
  $tc'Circle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Circle"#) -}
293086a73aa5f4eb01d9641d1478efe2
  $tc'Compose :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5508579521995397225##
                   2072895123541575263##
                   Shapes.$trModule
                   Shapes.$tc'Compose1) -}
92749d92e85fdf5022f80b624cfab69a
  $tc'Compose1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Compose"#) -}
aec754c03aad587187833a4addf8b80b
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3195375847419472585##
                   10849794876299215685##
                   Shapes.$trModule
                   Shapes.$tc'Empty1) -}
0902c92ca112cb5ec52fd297be9921de
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
d15e8c0442c31e0c6d427bb425a7b43c
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8405725240561246861##
                   14568242371641692237##
                   Shapes.$trModule
                   Shapes.$tc'Identity1) -}
cda32c83d5eaff0bb68532275732e343
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
c5b19d4171b29a01ce2ce253ef83b298
  $tc'Matrix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18004252534429044259##
                   3281914892712456587##
                   Shapes.$trModule
                   Shapes.$tc'Matrix1) -}
a7ac95a1e1515a02efddc55a8bfe00ca
  $tc'Matrix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Matrix"#) -}
33200e220e5ef1dbe567184691f2aaba
  $tc'Rotate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11171179917113039728##
                   6311701364981656177##
                   Shapes.$trModule
                   Shapes.$tc'Rotate1) -}
247935a06fbd5ea2772e93629c152472
  $tc'Rotate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rotate"#) -}
a1eb3bf22b7c74fe9f16bed1a333acba
  $tc'Scale :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   179205473857007630##
                   12271565779631979197##
                   Shapes.$trModule
                   Shapes.$tc'Scale1) -}
a3d5a6312ba51e82eb43b2215c7ecab2
  $tc'Scale1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scale"#) -}
18d874cea719a54521de9d031a872167
  $tc'Square :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6477060361835723119##
                   10017143134300875493##
                   Shapes.$trModule
                   Shapes.$tc'Square1) -}
8671b006c6490823172988a632cc25e6
  $tc'Square1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Square"#) -}
be15066dee463e6c4b35365b05312e30
  $tc'Translate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9038182593522450481##
                   1741082859741841331##
                   Shapes.$trModule
                   Shapes.$tc'Translate1) -}
c6f3a8b42d7e239f6a0d66b0233bf668
  $tc'Translate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Translate"#) -}
6a823a9543a4e9e9680b8f9b518d58c5
  $tc'Vector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11362301152791335527##
                   9784706303331028558##
                   Shapes.$trModule
                   Shapes.$tc'Vector1) -}
9c3f160828b6d3ce38713ebba00e31b4
  $tc'Vector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Vector"#) -}
c5105ae5ed142bbccf99633f403b9f70
  $tcMatrix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13238863783093574395##
                   7622284100398643608##
                   Shapes.$trModule
                   Shapes.$tcMatrix1) -}
c63bb118d80e3074f64f70368419e78e
  $tcMatrix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Matrix"#) -}
585cc9d72b6da026bebd8f0811410d63
  $tcShape :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11423593888779627928##
                   3765881125842586955##
                   Shapes.$trModule
                   Shapes.$tcShape1) -}
5aa73ef6ad40a4be3533a66fdaeb40da
  $tcShape1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Shape"#) -}
67a01c740ead8d0368cc90e98629fb38
  $tcTransform :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6147513826219508558##
                   17672506433979559765##
                   Shapes.$trModule
                   Shapes.$tcTransform1) -}
98226f5201334d999e82392f45a9e527
  $tcTransform1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Transform"#) -}
8b5c24680a880ddde3b346e205ff157a
  $tcVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1690893761102937676##
                   2377685798848636373##
                   Shapes.$trModule
                   Shapes.$tcVector1) -}
2c344fcd21b31451c8777b4dfb9ced86
  $tcVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vector"#) -}
efd3091fc8d3ce9b55c0234b1c7566c1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Shapes.$trModule2
                   Shapes.$trModule1) -}
2aa26a2792df3e76b9f5d59535ef9abb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Shapes"#) -}
950438b90ba147d1a91603055b41721a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
30683d654a3dc7c941e87453ea341b59
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Shapes.Vector -> Shapes.Vector -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Shapes.Vector)
                   (ww2 :: Shapes.Vector) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Shapes.Vector ww4 ww5 ->
                     Shapes.$w$cshowsPrec1 11# ww4 ww5 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Shapes.Vector ww4 ww5 ->
                     Shapes.$w$cshowsPrec1 11# ww4 ww5 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Shapes.$fShowMatrix2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Shapes.$fShowMatrix2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
759aa9661c76701a0e2550baf60655b0
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Shapes.$fShowMatrix4
                       ww4 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Shapes.$fShowMatrix4
                       ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Shapes.$fShowMatrix3
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Shapes.$fShowMatrix3
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
abd58a62a14eb9d62d876e708b16f31a
  $w$cshowsPrec2 ::
    Shapes.Shape -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Shapes.Shape) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Shapes.Empty -> GHC.Base.++ @ GHC.Types.Char Shapes.$fShowShape3 w1
                   Shapes.Circle
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fShowShape2 w1
                   Shapes.Square
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fShowShape1 w1 }) -}
df247a6d19262950dde752d187d7e655
  $wrotate :: GHC.Types.Double -> (# Shapes.Matrix #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Double) ->
                 (# Shapes.Matrix
                      (Shapes.Vector
                         (GHC.Float.cosDouble w)
                         (case w of wild { GHC.Types.D# x ->
                          GHC.Types.D# (GHC.Prim.negateDouble# (GHC.Prim.sinDouble# x)) }))
                      (Shapes.Vector
                         (GHC.Float.sinDouble w)
                         (GHC.Float.cosDouble w)) #)) -}
30abe0807d56e833bf9f7d0aa2da6443
  (<+>) :: Shapes.Transform -> Shapes.Transform -> Shapes.Transform
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (0, True, True) Shapes.Compose -}
c64a401bf490d56d98c3f58b3d969744
  type Drawing = [(Shapes.Transform, Shapes.Shape)]
d772832f15664d4c641a75d43fce9112
  data Matrix = Matrix Shapes.Vector Shapes.Vector
75073c5a552252cd6174be4c20468dc5
  type Point = Shapes.Vector
abd58a62a14eb9d62d876e708b16f31a
  data Shape = Empty | Circle | Square
640b275df0c73fd7b3cd43c0b0de359b
  data Transform
    = Identity
    | Translate Shapes.Vector
    | Scale Shapes.Vector
    | Compose Shapes.Transform Shapes.Transform
    | Rotate Shapes.Matrix
bcdea6d54abefb730e65e12e3a8a5891
  data Vector = Vector GHC.Types.Double GHC.Types.Double
0447aa03ff125f2261a6a698ae69527f
  circle :: Shapes.Shape
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Circle -}
69ba2dc567e9d294988e2a11f2509cbb
  empty :: Shapes.Shape
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Empty -}
da698b05306e833ef6592a72bc2504a6
  getX :: Shapes.Vector -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Vector) ->
                 case ds of wild { Shapes.Vector x y -> x }) -}
4e06a17e5167b54d56ad944bb6c17943
  getY :: Shapes.Vector -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Vector) ->
                 case ds of wild { Shapes.Vector x y -> y }) -}
2a5877bc760ac4f2fbe6d74d767369de
  identity :: Shapes.Transform
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Identity -}
3a4190ca5e74e3bb03f98ac70bf4d59e
  inside :: Shapes.Point -> Shapes.Drawing -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U(U),U(U))><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Shapes.inside1
                  `cast`
                (<Shapes.Point>_R
                 ->_R <Shapes.Drawing>_R
                 ->_R Data.Monoid.N:Any[0]) -}
d696e2889f55e8f26c266831e1e546f9
  inside1 :: Shapes.Point -> Shapes.Drawing -> Data.Monoid.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U(U),U(U))><S,1*U>,
     Unfolding: (\ (p :: Shapes.Point) (d :: Shapes.Drawing) ->
                 letrec {
                   go :: [(Shapes.Transform, Shapes.Shape)] -> Data.Monoid.Any
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Shapes.Transform, Shapes.Shape)]) ->
                     case ds of wild {
                       [] -> GHC.Types.False `cast` (Sym (Data.Monoid.N:Any[0]))
                       : y ys
                       -> case y of wild1 { (,) t s ->
                          case s of wild2 {
                            Shapes.Empty -> go ys
                            Shapes.Circle
                            -> case Shapes.transform t p of wild3 { Shapes.Vector x y1 ->
                               case x of wild4 { GHC.Types.D# x1 ->
                               case y1 of wild5 { GHC.Types.D# x2 ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<=##
                                         (GHC.Prim.sqrtDouble#
                                            (GHC.Prim.+##
                                               (GHC.Prim.**## x1 2.0##)
                                               (GHC.Prim.**## x2 2.0##)))
                                         1.0##) of wild6 {
                                 GHC.Types.False -> go ys
                                 GHC.Types.True
                                 -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) } } } }
                            Shapes.Square
                            -> case Shapes.transform t p of wild3 { Shapes.Vector x y1 ->
                               case x of wild4 { GHC.Types.D# x1 ->
                               let {
                                 $w$j :: GHC.Prim.Double# -> GHC.Types.Bool
                                   {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                 = \ (w :: GHC.Prim.Double#)[OneShot] ->
                                   case y1 of wild5 { GHC.Types.D# x2 ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.==## x2 0.0##) of wild6 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.>## x2 0.0##) of wild7 {
                                          GHC.Types.False
                                          -> let {
                                               y2 :: GHC.Prim.Double# = GHC.Prim.negateDouble# x2
                                             } in
                                             case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<=## w y2) of wild8 {
                                               GHC.Types.False
                                               -> GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<=## w 1.0##)
                                               GHC.Types.True
                                               -> GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<=## y2 1.0##) }
                                          GHC.Types.True
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<=## w x2) of wild8 {
                                               GHC.Types.False
                                               -> GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<=## w 1.0##)
                                               GHC.Types.True
                                               -> GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.<=## x2 1.0##) } }
                                     GHC.Types.True
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<=## w 0.0##) of wild7 {
                                          GHC.Types.False
                                          -> GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<=## w 1.0##)
                                          GHC.Types.True -> GHC.Types.True } } }
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==## x1 0.0##) of wild5 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.>## x1 0.0##) of wild6 {
                                      GHC.Types.False
                                      -> case $w$j (GHC.Prim.negateDouble# x1) of wild7 {
                                           GHC.Types.False -> go ys
                                           GHC.Types.True
                                           -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) }
                                      GHC.Types.True
                                      -> case $w$j x1 of wild7 {
                                           GHC.Types.False -> go ys
                                           GHC.Types.True
                                           -> GHC.Types.True `cast` (Sym (Data.Monoid.N:Any[0])) } }
                                 GHC.Types.True
                                 -> case $w$j 0.0## of wild6 {
                                      GHC.Types.False -> go ys
                                      GHC.Types.True
                                      -> GHC.Types.True
                                           `cast`
                                         (Sym (Data.Monoid.N:Any[0])) } } } } } } }
                 } in
                 go d) -}
51dad11c2a6e38339d18943296b9452b
  point :: GHC.Types.Double -> GHC.Types.Double -> Shapes.Point
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True) Shapes.Vector -}
9dc6bcb3c015ca54e9defb7dbe65aec2
  rotate :: GHC.Types.Double -> Shapes.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m5,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Double) ->
                 case Shapes.$wrotate w of ww { Unit# ww1 -> Shapes.Rotate ww1 }) -}
9695df584ca0c85acf362724946c0c39
  scale :: Shapes.Vector -> Shapes.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True) Shapes.Scale -}
7aee64b8501385336f3ec4c56d73c793
  square :: Shapes.Shape
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Square -}
e7ac1b4983a26f8c1c46353c93692bcb
  transform :: Shapes.Transform -> Shapes.Point -> Shapes.Point
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U(U),U(U))> -}
66aa2d4d4130248b53841a18b332b67f
  translate :: Shapes.Vector -> Shapes.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True) Shapes.Translate -}
instance [safe] GHC.Show.Show [Shapes.Matrix] = Shapes.$fShowMatrix
instance [safe] GHC.Show.Show [Shapes.Shape] = Shapes.$fShowShape
instance [safe] GHC.Show.Show [Shapes.Transform]
  = Shapes.$fShowTransform
instance [safe] GHC.Show.Show [Shapes.Vector] = Shapes.$fShowVector
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

