
==================== FINAL INTERFACE ====================
2017-11-08 11:04:48.323964 UTC

interface main@main:Signal 8002
  interface hash: 200523bba77dce999dd7ff068740ef77
  ABI hash: 8f3891611e92f8e6ad846bb438bc6c31
  export-list hash: 13c3f0971a2b2277dd8e92b500f82e2f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ae5613e32a430faf7f5670c4d8c364a6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Signal.$$
  Signal.constS
  Signal.mapS
  Signal.mapT
  Signal.sample
  Signal.timeS
  Signal.Signal
  Signal.Time
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
912658aabf7094b621c593386476040b
  ($$) ::
    Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Signal.$$1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Signal.Signal (a -> b)>_R
                 ->_R <Signal.Signal a>_R
                 ->_R Sym (Signal.N:Signal[0]) <b>_N) -}
7c7ac882f99a7f620bbc2cb537348d40
  $$1 ::
    Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Time -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (fs :: Signal.Signal (a -> b))
                   (xs :: Signal.Signal a)
                   (t :: Signal.Time) ->
                 fs `cast` (Signal.N:Signal[0] <a -> b>_N)
                   t
                   (xs `cast` (Signal.N:Signal[0] <a>_N) t)) -}
5580a3ae3b27e679e472365d8e7766e5
  $tc'Sig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15533817917871755191##
                   15310321885204546594##
                   Signal.$trModule
                   Signal.$tc'Sig1) -}
3cef595a260bb9de5e48681de652b17d
  $tc'Sig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sig"#) -}
95232216b5278ea6b024a6b94fc67dc3
  $tcSignal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15285893991788110796##
                   2861504126629731351##
                   Signal.$trModule
                   Signal.$trModule1) -}
67e24bdf3b7bc2b91d8e0bc25f78e8cc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Signal.$trModule2
                   Signal.$trModule1) -}
fddd0f9b98371eec5befd500f4709ab7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Signal"#) -}
b87d7e76c1b675d24235232a7ab18a5d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
6cb891b622866e0c718f171c518abac1
  newtype Signal a = Sig {unSig :: Signal.Time -> a}
6de611a6573e938284c52c1e375785ec
  type Time = GHC.Types.Double
8f5d913aa0de182202c27d7982c7b33e
  constS :: a -> Signal.Signal a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Signal.constS1
                  `cast`
                (forall (a :: <*>_N). <a>_R ->_R Sym (Signal.N:Signal[0]) <a>_N) -}
b855d45cf41a713a365c0d7abf5c17bf
  constS1 :: a -> Signal.Time -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (x :: a) (ds :: Signal.Time) -> x) -}
d6bae8af6a78d0e2b34043087cd1635d
  mapS :: (a -> b) -> Signal.Signal a -> Signal.Signal b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Signal.mapS1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Signal.Signal a>_R
                 ->_R Sym (Signal.N:Signal[0]) <b>_N) -}
d006afb869f81ed1dd4fbd15381ec1cd
  mapS1 :: (a -> b) -> Signal.Signal a -> Signal.Time -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (xs :: Signal.Signal a)
                   (eta :: Signal.Time) ->
                 f (xs `cast` (Signal.N:Signal[0] <a>_N) eta)) -}
ca8e4ba3ab9d04a1740e4ab6a239f98c
  mapT ::
    (Signal.Time -> Signal.Time) -> Signal.Signal a -> Signal.Signal a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Signal.mapT1
                  `cast`
                (forall (a :: <*>_N).
                 <Signal.Time -> Signal.Time>_R
                 ->_R <Signal.Signal a>_R
                 ->_R Sym (Signal.N:Signal[0]) <a>_N) -}
866033d07a988657621bf3b24f21e04c
  mapT1 ::
    (Signal.Time -> Signal.Time) -> Signal.Signal a -> Signal.Time -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (f :: Signal.Time -> Signal.Time)
                   (xs :: Signal.Signal a)
                   (eta :: Signal.Time) ->
                 xs `cast` (Signal.N:Signal[0] <a>_N) (f eta)) -}
8665d947927438ff730d66c979285b3d
  sample :: Signal.Signal a -> Signal.Time -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Signal.sample1
                  `cast`
                (forall (a :: <*>_N).
                 <Signal.Signal a>_R ->_R Signal.N:Signal[0] <a>_N) -}
b36ff9cd8a132abdbacac406617cd140
  sample1 :: Signal.Signal a -> Signal.Signal a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Signal.Signal a) -> ds) -}
3af51182133b8b9379644115e0f5137f
  timeS :: Signal.Signal Signal.Time
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.id @ Signal.Time)
                  `cast`
                (Sym (Signal.N:Signal[0]) <Signal.Time>_N) -}
3193fc7093b48635380eb550c7638b2b
  unSig :: Signal.Signal a -> Signal.Time -> a
  RecSel Left Signal.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Signal.sample1
                  `cast`
                (forall (a :: <*>_N).
                 <Signal.Signal a>_R ->_R Signal.N:Signal[0] <a>_N) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

